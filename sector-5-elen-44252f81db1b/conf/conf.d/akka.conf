# Akka related configuration file.
# https://www.playframework.com/documentation/latest/ConfigFile
# http://doc.akka.io/docs/akka/current/general/configuration.html


## AKKA
# https://www.playframework.com/documentation/latest/ThreadPools
# https://www.playframework.com/documentation/latest/JavaAsync
# ~~~~~
akka {
  actor {
    allow-java-serialization = on

    default-dispatcher {

      # Must be one of the following
      # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
      # MessageDispatcherConfigurator with a public constructor with
      # both com.typesafe.config.Config parameter and
      # akka.dispatch.DispatcherPrerequisites parameters.
      # PinnedDispatcher must be used together with executor=thread-pool-executor
      type = "Dispatcher"

      # Which kind of ExecutorService to use for this dispatcher
      # Valid options:
      #  - "default-executor" requires a "default-executor" section
      #  - "fork-join-executor" requires a "fork-join-executor" section
      #  - "thread-pool-executor" requires a "thread-pool-executor" section
      #  - A FQCN of a class extending ExecutorServiceConfigurator
      executor = "fork-join-executor"

      # Throughput defines the number of messages that are processed in a batch
      # before the thread is returned to the pool. Set to 1 for as fair as possible
      throughput = 1

      ## Fork Join Executor
      # ~~~~~
      # This will be used if you have set "executor = "fork-join-executor""
      # Underlying thread pool implementation is akka.dispatch.forkjoin.ForkJoinPool
      fork-join-executor {

        # Settings this to 1 instead of 3 seems to improve performance
        parallelism-factor = 1.0

        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 30  # Take care to the number of allowed SQL connections

        # Setting to "FIFO" to use queue like peeking mode which "poll" or
        # "LIFO" to use stack like peeking mode which "pop"
        # Setting this to LIFO changes the fork-join-executor
        # to use a stack discipline for task scheduling. This usually
        # improves throughput at the cost of possibly increasing
        # latency and risking task starvation (which should be rare)
        task-peeking-mode = "FIFO"
      }

      ## Fork Join Executor
      # ~~~~~
      # This will be used if you have set "executor = "thread-pool-executor""
      # Underlying thread pool implementation is java.util.concurrent.ThreadPoolExecutor
      thread-pool-executor {

        # Define a fixed thread pool size with this property. The corePoolSize
        # and the maximumPoolSize of the ThreadPoolExecutor will be set to this
        # name, if it is defined. Then the other pool-size properties will not
        # be used
        #
        # Valid values are: `off` or a positive integer
        fixed-pool-size = 30  # Take care to the number of allowed SQL connections
      }

      ## Default Executor
      # ~~~~~
      # This will be used if you have set "executor = "default-executor"".
      # If an ActorSystem is created with a given ExecutionContext, this
      # ExecutionContext will be used as the default executor for all
      # dispatchers in the ActorSystem configured with
      # executor = "default-executor". Note that "default-executor"
      # is the default name for executor, and therefore used if not
      # specified otherwise. If no ExecutionContext is given,
      # the executor configured in "fallback" will be used
      default-executor {
        fallback = "fork-join-executor"
      }
    }
  }
}
