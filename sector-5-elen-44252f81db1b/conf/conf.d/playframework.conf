# Play Framework related configuration file.
# https://www.playframework.com/documentation/latest/ConfigFile


play {

  application {

    ## Application Loader
    # https://www.playframework.com/documentation/latest/JavaDependencyInjection
    # ~~~~~
    #loader = "ApplicationLoader"
    #loader = "io.playrconf.ApplicationLoaderJava"
  }

  ## Database configuration
  # ~~~~~
  db {
    prototype {

      ## HikariCP
      # https://github.com/brettwooldridge/HikariCP
      # ~~~~~
      hikaricp {

        # This property controls the default auto-commit behavior of connections returned
        # from the pool. It is a boolean name. Default: true
        autoCommit = true

        # If non null, the query that should be used to test connections
        # If your driver supports JDBC4 we strongly recommend not setting this property.
        # This is for "legacy" drivers that do not support the JDBC4 Connection.isValid()
        # API. This is the query that will be executed just before a connection is given
        # to you from the pool to validate that the connection to the database is still
        # alive. Again, try running the pool without this property, HikariCP will logger an
        # error if your driver is not JDBC4 compliant to let you know. Default: none
        connectionTestQuery = "SELECT 1"

        # This property controls the maximum number of milliseconds that a client (that's
        # you) will wait for a connection from the pool. If this time is exceeded without
        # a connection becoming available, a SQLException will be thrown. Lowest acceptable
        # connection timeout is 250 ms. Default: 30000 (30 seconds)
        connectionTimeout = 30 seconds

        # This property controls the maximum amount of time that a connection is allowed
        # to sit idle in the pool. This setting only applies when minimumIdle is defined
        # to be less than maximumPoolSize. Whether a connection is retired as idle or not
        # is subject to a maximum variation of +30 seconds, and average variation of +15
        # seconds. A connection will never be retired as idle before this timeout. Once
        # the pool reaches minimumIdle connections, connections will no longer be retired,
        # even if idle. A name of 0 means that idle connections are never removed from
        # the pool. The minimum allowed name is 10000ms (10 seconds). Default: 600000
        # (10 minutes)
        idleTimeout = 10 minutes

        # This property controls the maximum lifetime of a connection in the pool. An
        # in-use connection will never be retired, only when it is closed will it then
        # be removed. On a connection-by-connection basis, minor negative attenuation
        # is applied to avoid mass-extinction in the pool. We strongly recommend setting
        # this name, and it should be at least 30 seconds less than any database or
        # infrastructure imposed connection time limit. A name of 0 indicates no maximum
        # lifetime (infinite lifetime), subject of course to the idleTimeout setting.
        # Default: 1800000 (30 minutes)
        maxLifetime = 30 minutes

        # This property controls the amount of time that a connection can be out of the
        # pool before a message is logged indicating a possible connection leak. A name
        # of 0 means leak detection is disabled. Lowest acceptable name for enabling
        # leak detection is 2000 (2 seconds). Default: 0
        #leakDetectionThreshold = 2 seconds

        # If non null, sets the minimum number of idle connections to maintain.
        # ==> https://github.com/brettwooldridge/HikariCP/issues/704
        # If you want the pool to grow and shrink, set minimumIdle to something like
        # 2. This does not necessarily mean you will have a pool size of 2, just that
        # HikariCP will try to keep two connections "in reserve". If you application
        # is regularly using 13 connections, the pool will probably sit around 15
        # connections
        minimumIdle = 2

        # This property controls the maximum size that the pool is allowed to reach,
        # including both idle and in-use connections. Basically this name will
        # determine the maximum number of actual connections to the database backend.
        # A reasonable name for this is best determined by your execution environment.
        # When the pool reaches this size, and no idle connections are available, calls
        # to getConnection() will block for up to connectionTimeout milliseconds before
        # timing out
        maximumPoolSize = 30  # Take care to the number of allowed SQL connection(s)

        # A SQL statement that will be executed after every new connection creation before
        # adding it to the pool
        connectionInitSql = "SET TIMEZONE='UTC'"
        connectionInitSql = ${?PLAY_DB_PROTOTYPE_HIKARICP_CONNINITSQL}
      }
    }
  }

  ## Evolutions
  # https://www.playframework.com/documentation/latest/Evolutions
  # ~~~~~
  # Evolutions allows database scripts to be automatically run on startup in dev mode
  # for database migrations. You must enable this by adding to build.sbt:
  #
  # libraryDependencies += evolutions
  #
  evolutions {

    # You can disable evolutions for a specific datasource if necessary
    db.default.enabled = true
    db.default.enabled = ${?PLAY_EVOLUTIONS_DB_DEFAULT_ENABLED}

    # Whether a locks table should be used. This must be used if you have many Play
    # nodes that may potentially run evolutions, but you want to ensure that only one
    # does. It will create a table called play_evolutions_lock, and use a
    # SELECT FOR UPDATE NOWAIT or SELECT FOR UPDATE to lock it. This will only work
    # for Postgres, Oracle, and MySQL InnoDB. It will not work for other databases
    db.default.useLocks = false
    db.default.useLocks = ${?PLAY_EVOLUTIONS_DB_DEFAULT_USELOCK}

    # Whether evolutions should be automatically applied. In dev mode, this will cause
    # both ups and downs evolutions to be automatically applied. In prod mode, it will
    # cause only ups evolutions to be automatically applied
    db.default.autoApply = true
    db.default.autoApply = ${?PLAY_EVOLUTIONS_DB_DEFAULT_AUTOAPPLY}

    # Auto apply down instructions when evolution applied
    db.default.autoApplyDowns = false
    db.default.autoApplyDowns = ${?PLAY_EVOLUTIONS_DB_DEFAULT_AUTOAPPLYDOWNS}
  }

  ## Filters
  # https://www.playframework.com/documentation/latest/JavaHttpFilters
  # ~~~~~
  filters {

    enabled = []
    enabled += "play.filters.gzip.GzipFilter" # https://www.playframework.com/documentation/2.7.x/GzipEncoding
    enabled += "play.filters.csrf.CSRFFilter" # https://www.playframework.com/documentation/2.7.x/JavaCsrf

    #enabled += "play.filters.csp.CSPFilter" # https://www.playframework.com/documentation/2.7.x/CspFilter

    ## CORS filter configuration
    # https://www.playframework.com/documentation/latest/CorsFilter
    # ~~~~~
    # CORS is a protocol that allows web applications to make requests from the browser
    # across different domains.
    # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
    # dependencies on CORS settings.
    cors {
      # Filter paths by a whitelist of path prefixes
      #pathPrefixes = []

      # The allowed origins. If null, all origins are allowed.
      #allowedOrigins = ["http://www.example.com"]

      # The allowed HTTP methods. If null, all methods are allowed
      allowedHttpMethods = ["GET"]
    }

    ## CSRF Filter
    # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
    # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
    # ~~~~~
    # Play supports multiple methods for verifying that a request is not a CSRF request.
    # The primary mechanism is a CSRF token. This token gets placed either in the query string
    # or body of every form submitted, and also gets placed in the users session.
    # Play then verifies that both tokens are present and match.
    csrf {
      # Sets the cookie to be sent only over HTTPS
      #cookie.secure = true

      # Defaults to CSRFErrorHandler in the root package.
      #errorHandler = MyCSRFErrorHandler
    }

    ## Security headers filter configuration
    # https://www.playframework.com/documentation/latest/SecurityHeaders
    # ~~~~~
    # Defines security headers that prevent XSS attacks.
    # If enabled, then all options are set to the below configuration by default:
    headers {
      # The X-Frame-Options header. If null, the header is not set.
      frameOptions = "DENY"

      # The X-XSS-Protection header. If null, the header is not set.
      xssProtection = "1; mode=block"

      # The X-Content-Type-Options header. If null, the header is not set.
      contentTypeOptions = "nosniff"

      # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
      permittedCrossDomainPolicies = "master-only"

      # The Content-Security-Policy header. If null, the header is not set.
      contentSecurityPolicy = "default-src 'self' 'unsafe-eval' 'unsafe-inline'"
    }
  }

  http {

    ## Secret key
    # http://www.playframework.com/documentation/latest/ApplicationSecret
    # ~~~~~
    # The secret key is used to sign Play's session cookie.
    # This must be changed for production, but we don't recommend you change it in this file.
    secret.key = "v;XVTSwS4BF2{ lxH{5>,K-'Sben>sA8BrcZ];K{gA_lU0-;C~NZK-Z@)o2v*PWp"
    secret.key = ${?PLAY_HTTP_SECRETKEY}

    ## Body parser
    # https://www.playframework.com/documentation/2.5.x/JavaBodyParsers
    # ~~~~~
    parser {
      maxMemoryBuffer = 256KiB
      maxDiskBuffer = 1MiB
    }

    ## Forwarded
    # https://www.playframework.com/documentation/latest/HTTPServer
    # ~~~~~
    forwarded {
      version = "x-forwarded"
      trustedProxies = ["0.0.0.0/0", "::/0"]
    }

    ## Flash configuration
    # ~~~~~
    flash = {

      # The cookie name
      cookieName = "flash"

      # Whether the flash cookie should be secure or not
      secure = false

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true

      # The name of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      sameSite = "lax"

      # The flash path
      # Must start with /.
      path = ${play.http.context}

      # The domain to set on the flash cookie
      # If null, does not set a domain on the flash cookie.
      domain = ${play.http.session.domain}

      jwt {

        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = null

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this name.
        clockSkew = 5 minutes

        # The claim key under which all user data is stored in the JWT.
        dataClaim = "data"
      }
    }

    ## Session configuration
    # ~~~~~
    session = {

      # The cookie name
      cookieName = "session"

      # Whether the secure attribute of the cookie should be set to true
      secure = false

      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = null

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true

      # The name of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      sameSite = "lax"

      # The domain to set on the session cookie
      # If null, does not set a domain on the session cookie.
      domain = null

      # The session path
      # Must start with /.
      path = ${play.http.context}

      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = ${play.http.session.maxAge}

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this name.
        clockSkew = 5 minutes

        # The claim key under which all user data is stored in the JWT.
        dataClaim = "data"
      }
    }
  }

  ## Internationalisation
  # https://www.playframework.com/documentation/latest/JavaI18N
  # https://www.playframework.com/documentation/latest/ScalaI18N
  # ~~~~~
  # Play comes with its own i18n settings, which allow the user's preferred language
  # to map through to internal messages, or allow the language to be stored in a cookie.
  i18n {

    # The application languages
    langs = ["en", "fr"]

    # Whether the language cookie should be secure or not
    langCookieSecure = false

    # Whether the HTTP only attribute of the cookie should be set to true
    #langCookieHttpOnly = true

    langCookieName = "lang"
  }

  ## Modules
  # https://www.playframework.com/documentation/latest/Modules
  # ~~~~~
  # Control which modules are loaded when Play starts.  Note that modules are
  # the replacement for "GlobalSettings", which are deprecated in 2.5.x.
  # Please see https://www.playframework.com/documentation/latest/GlobalSettings
  # for more information.
  modules {
    # Implementation of a cache over redis
    enabled += play.api.cache.redis.RedisCacheModule
    # Security modules Deadbolt and Pac4J custom security module
    enabled += be.objectify.deadbolt.java.DeadboltModule
    enabled += modules.SecurityModule
  }
}
